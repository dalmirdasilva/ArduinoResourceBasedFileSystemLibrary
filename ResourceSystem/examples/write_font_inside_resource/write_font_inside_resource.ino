#include <Wire.h>
#include <ExternalEeprom.h>
#include <External24cl256Eeprom.h>
#include <rs.h>
#include <rs_util.h>
#include <rs_io.h>
#include <rs_init_partition.h>
#include <Resource.h>
#include <ResourceIO.h>
#include <ResourceSystem.h>
#include <SimpleResource.h>
#include <SimpleResourceIO.h>
#include <SimpleResourceSystem.h>
#include <SimpleExternalEepromResourceIO.h>
#include <Seekable.h>
#include <Closeable.h>
#include <InputStream.h>
#include <ResourceInputStream.h>
#include <OutputStream.h>
#include <ResourceOutputStream.h>
#include <FilterOutputStream.h>
#include <BufferedOutputStream.h>
#include <Seekable.h>
#include <Closeable.h>
#include <InputStream.h>
#include <ResourceInputStream.h>
#include <OutputStream.h>
#include <ResourceOutputStream.h>

#include <stdarg.h>

void sprintf(char *fmt, ...) {
    char tmp[64];
    va_list args;
    va_start(args, fmt);
    vsnprintf(tmp, 64, fmt, args);
    va_end(args);
    Serial.print(tmp);
}

const unsigned char font[] = {
	0x00,0x05,0x08,0x02, // Header
	0x20,0x50,0x00,0x0c, // Seg 0
	0x51,0x7d,0x01,0x01, // Seg 1
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0x00,0x00,	//  !
	0x00,0x03,0x00,0x03,0x00,0x14,0x7f,0x14,0x7f,0x14,	// "#
	0x24,0x2a,0x7f,0x2a,0x12,0x23,0x13,0x08,0x64,0x62,	// $%
	0x36,0x49,0x55,0x22,0x50,0x00,0x05,0x03,0x00,0x00,	// &'
	0x00,0x1c,0x22,0x41,0x00,0x00,0x41,0x22,0x1c,0x00,	// ()
	0x14,0x08,0x3e,0x08,0x14,0x08,0x08,0x3e,0x08,0x08,	// *+
	0x00,0x50,0x30,0x00,0x00,0x08,0x08,0x08,0x08,0x08,	// ,-
	0x00,0x60,0x60,0x00,0x00,0x20,0x10,0x08,0x04,0x02,	// ./
	0x3e,0x51,0x49,0x45,0x3e,0x00,0x42,0x7f,0x40,0x00,	// 01
	0x42,0x61,0x51,0x49,0x46,0x21,0x41,0x45,0x4b,0x31,	// 23
	0x18,0x14,0x12,0x7f,0x10,0x27,0x45,0x45,0x45,0x39,	// 45
	0x3c,0x4a,0x49,0x49,0x30,0x01,0x71,0x09,0x05,0x03,	// 67
	0x36,0x49,0x49,0x49,0x36,0x06,0x49,0x49,0x29,0x1e,	// 89
	0x00,0x36,0x36,0x00,0x00,0x00,0x56,0x36,0x00,0x00,	// :;
	0x08,0x14,0x22,0x41,0x00,0x14,0x14,0x14,0x14,0x14,	// <=
	0x00,0x41,0x22,0x14,0x08,0x02,0x01,0x51,0x09,0x06,	// >?
	0x32,0x49,0x79,0x41,0x3e,0x7e,0x11,0x11,0x11,0x7e,	// @A
	0x7f,0x49,0x49,0x49,0x36,0x3e,0x41,0x41,0x41,0x22,	// BC
	0x7f,0x41,0x41,0x22,0x1c,0x7f,0x49,0x49,0x49,0x41,	// DE
	0x7f,0x09,0x09,0x09,0x01,0x3e,0x41,0x49,0x49,0x7a,	// FG
	0x7f,0x08,0x08,0x08,0x7f,0x00,0x41,0x7f,0x41,0x00,	// HI
	0x20,0x40,0x41,0x3f,0x01,0x7f,0x08,0x14,0x22,0x41,	// JK
	0x7f,0x40,0x40,0x40,0x40,0x7f,0x02,0x0c,0x02,0x7f,	// LM
	0x7f,0x04,0x08,0x10,0x7f,0x3e,0x41,0x41,0x41,0x3e,	// NO
	0x7f,0x09,0x09,0x09,0x06,0x3e,0x41,0x51,0x21,0x5e,	// PQ
	0x7f,0x09,0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31,	// RS
	0x01,0x01,0x7f,0x01,0x01,0x3f,0x40,0x40,0x40,0x3f,	// TU
	0x1f,0x20,0x40,0x20,0x1f,0x3f,0x40,0x38,0x40,0x3f,	// VW
	0x63,0x14,0x08,0x14,0x63,0x07,0x08,0x70,0x08,0x07,	// XY
	0x61,0x51,0x49,0x45,0x43,0x00,0x7f,0x41,0x41,0x00,	// Z[
	0x02,0x04,0x08,0x10,0x20,0x00,0x41,0x41,0x7f,0x00,	// \]
	0x04,0x02,0x01,0x02,0x04,0x40,0x40,0x40,0x40,0x40,	// ^_
	0x00,0x01,0x02,0x04,0x00,0x20,0x54,0x54,0x54,0x78,	// `a
	0x7f,0x48,0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20,	// bc
	0x38,0x44,0x44,0x48,0x7f,0x38,0x54,0x54,0x54,0x18,	// de
	0x08,0x7e,0x09,0x01,0x02,0x0c,0x52,0x52,0x52,0x3e,	// fg
	0x7f,0x08,0x04,0x04,0x78,0x00,0x44,0x7d,0x40,0x00,	// hi
	0x20,0x40,0x44,0x3d,0x00,0x7f,0x10,0x28,0x44,0x00,	// jk
	0x00,0x41,0x7f,0x40,0x00,0x7c,0x04,0x18,0x04,0x78,	// lm
	0x7c,0x08,0x04,0x04,0x78,0x38,0x44,0x44,0x44,0x38,	// no
	0x7c,0x14,0x14,0x14,0x08,0x08,0x14,0x14,0x18,0x7c,	// pq
	0x7c,0x08,0x04,0x04,0x08,0x48,0x54,0x54,0x54,0x20,	// rs
	0x04,0x3f,0x44,0x40,0x20,0x3c,0x40,0x40,0x20,0x7c,	// tu
	0x1c,0x20,0x40,0x20,0x1c,0x3c,0x40,0x30,0x40,0x3c,	// vw
	0x44,0x28,0x10,0x28,0x44,0x0c,0x50,0x50,0x50,0x3c,	// xy
	0x44,0x64,0x54,0x4c,0x44,0x00,0x08,0x36,0x41,0x00,  // z{
	0x00,0x00,0x7f,0x00,0x00,0x00,0x41,0x36,0x08,0x00   // |}
};

void setup() {
    Serial.begin(9600);
    
    rs_t rs;
    rs_init_partition(&rs, RS_DISK_32K, RS_ENV_ARDUINO);

    SimpleResourceSystem resourceSystem(RS_DRIVER_ARDUINO_EEPROM);
    External24cl256Eeprom eeprom(0x00);
    SimpleExternalEepromResourceIO io(&eeprom);
    SimpleResourceIO::associateIO(&io, RS_DRIVER_ARDUINO_EEPROM);

    sprintf("Monting...");
    if (resourceSystem.mount(ResourceSystem::MOUNT_READ_WRITE)) {
        sprintf("done.\n");
    } else {
        sprintf("fail. LOR: %x\n", (int) resourceSystem.getLastOperationResult());
        return;
    }
    
    SimpleResource rw = resourceSystem.alloc();
    sprintf("code: %x\n", rw.getCode());
    sprintf("open: %x\n", rw.open(Resource::OPEN_READ_WRITE));
    
    sprintf("writing...");
    ResourceOutputStream ros(&rw);
    unsigned char b[16];
    BufferedOutputStream bos(&ros, b, 16);
    for (long i = 0; i < sizeof(font); i++) {
        bos.write(font[i]);
    }
    bos.close();
    sprintf("done.\n");
    
    sprintf("rw size: %d\n", rw.size());
    
    sprintf("open: %x\n", rw.open(Resource::OPEN_READ_ONLY));
    ResourceInputStream ris(&rw);
    while (ris.available()) {
        sprintf("%x\n", ris.read());
    }
    rw.close();
    
    sprintf("Umonting... ");
    if (resourceSystem.umount()) {
        sprintf("done.\n");
    } else {
        sprintf("fail. LOR: %x\n", (int) resourceSystem.getLastOperationResult());
        return;
    }
}

void loop() {
}
